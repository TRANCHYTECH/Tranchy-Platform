/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * Tranchy Ask Api Documentation
 * OpenAPI spec version: v1
 */
import type {
  CreateQuestionEventBody,
  CreateQuestionEventResponse,
  CreateQuestionRequest,
  CreateQuestionResponse,
  CreateUserExpertiseRequest,
  FinishConsultationRequest,
  GetMyConsultationsParams,
  GetMyQuestionsParams,
  GetQuestionConfigurationsResponse,
  GetRecentQuestionsParams,
  GetSavedQuestionsResponse,
  GetUserExpertiseResponse,
  GetUserHighlightsResponse,
  GetUserNotificationResponse,
  GetUserResponse,
  MobileQuestionEventMessageSent,
  QueryQuestionsRequest,
  Question,
  QuestionBriefPaginationResponse,
  SaveQuestionRequest,
  SaveQuestionResponse,
  UpdateUserExpertiseRequest,
  UpdateUserRequest,
  UploadFileResponse,
  UploadQuestionFileParams,
} from "./models"
import { apiRequest } from "../api/api"

/**
 * @summary Create a question event
 */
export const createQuestionEvent = (
  questionId: string,
  createQuestionEventBody: CreateQuestionEventBody,
) => {
  return apiRequest<CreateQuestionEventResponse>({
    url: `/mobile/questions/${questionId}/events`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createQuestionEventBody,
  })
}

/**
 * @summary List question events for mobile devices
 */
export const listMobileQuestionEvents = (questionId: string) => {
  return apiRequest<MobileQuestionEventMessageSent[]>({
    url: `/mobile/questions/${questionId}/events`,
    method: "GET",
  })
}

/**
 * @summary Create question
 */
export const createQuestion = (createQuestionRequest: CreateQuestionRequest) => {
  return apiRequest<CreateQuestionResponse>({
    url: `/mobile/questions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createQuestionRequest,
  })
}

/**
 * @summary Get question configurations for user
 */
export const getQuestionConfigurations = () => {
  return apiRequest<GetQuestionConfigurationsResponse>({
    url: `/mobile/questions/configurations`,
    method: "GET",
  })
}

/**
 * @summary Get question detail
 */
export const getQuestion = (questionId: string) => {
  return apiRequest<Question>({ url: `/mobile/questions/${questionId}`, method: "GET" })
}

/**
 * @summary Get highlights for user
 */
export const getUserHighlights = () => {
  return apiRequest<GetUserHighlightsResponse>({
    url: `/mobile/questions/aggregates/user-highlights`,
    method: "GET",
  })
}

/**
 * @summary Get community questions
 */
export const getCommunityQuestions = () => {
  return apiRequest<Question[]>({ url: `/mobile/questions/sections/community`, method: "GET" })
}

/**
 * @summary Get my questions
 */
export const getMyQuestions = (params: GetMyQuestionsParams) => {
  return apiRequest<QuestionBriefPaginationResponse>({
    url: `/mobile/questions/sections/mine`,
    method: "GET",
    params,
  })
}

/**
 * @summary Get my consultations
 */
export const getMyConsultations = (params: GetMyConsultationsParams) => {
  return apiRequest<QuestionBriefPaginationResponse>({
    url: `/mobile/questions/sections/my-consultations`,
    method: "GET",
    params,
  })
}

/**
 * @summary Get recent questions
 */
export const getRecentQuestions = (params: GetRecentQuestionsParams) => {
  return apiRequest<QuestionBriefPaginationResponse>({
    url: `/mobile/questions/sections/recent`,
    method: "GET",
    params,
  })
}

/**
 * @summary Query questions
 */
export const queryQuestions = (queryQuestionsRequest: QueryQuestionsRequest) => {
  return apiRequest<QuestionBriefPaginationResponse>({
    url: `/mobile/questions/sections/query`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: queryQuestionsRequest,
  })
}

/**
 * @summary Take consultation
 */
export const pickQuestion = (questionId: string) => {
  return apiRequest<Question>({ url: `/mobile/questions/${questionId}:pick`, method: "POST" })
}

/**
 * @summary Resolve consultation
 */
export const resolveConsultation = (
  questionId: string,
  finishConsultationRequest: FinishConsultationRequest,
) => {
  return apiRequest<void>({
    url: `/mobile/questions/${questionId}:resolve`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: finishConsultationRequest,
  })
}

/**
 * @summary Upload file for question
 */
export const uploadQuestionFile = (
  questionId: string,
  uploadQuestionFileBody: Blob,
  params?: UploadQuestionFileParams,
) => {
  const formData = new FormData()
  formData.append("data", uploadQuestionFileBody)

  return apiRequest<UploadFileResponse>({
    url: `/mobile/questions/${questionId}/files`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  })
}

/**
 * @summary Create expertise info for current user
 */
export const createUserExpertise = (createUserExpertiseRequest: CreateUserExpertiseRequest) => {
  return apiRequest<void>({
    url: `/mobile/users/me/sections/expertise`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserExpertiseRequest,
  })
}

/**
 * @summary Get expertise info of current user
 */
export const getUserExpertise = () => {
  return apiRequest<GetUserExpertiseResponse[]>({
    url: `/mobile/users/me/sections/expertise`,
    method: "GET",
  })
}

/**
 * @summary Update expertise info of current user
 */
export const updateUserExpertise = (updateUserExpertiseRequest: UpdateUserExpertiseRequest) => {
  return apiRequest<void>({
    url: `/mobile/users/me/sections/expertise`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateUserExpertiseRequest,
  })
}

/**
 * @summary Get user saved questions
 */
export const getSavedQuestions = () => {
  return apiRequest<GetSavedQuestionsResponse>({
    url: `/mobile/users/me/sections/saved-questions`,
    method: "GET",
  })
}

/**
 * @summary User saves question to their list
 */
export const userSaveQuestion = (saveQuestionRequest: SaveQuestionRequest) => {
  return apiRequest<SaveQuestionResponse>({
    url: `/mobile/users/me/sections/saved-questions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: saveQuestionRequest,
  })
}

/**
 * @summary Get current user
 */
export const getCurrentUser = () => {
  return apiRequest<GetUserResponse>({ url: `/mobile/users/me`, method: "GET" })
}

/**
 * @summary Update current user
 */
export const updateUser = (updateUserRequest: UpdateUserRequest) => {
  return apiRequest<void>({
    url: `/mobile/users/me`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateUserRequest,
  })
}

/**
 * @summary Get current user contact
 */
export const getCurrentUserContacts = () => {
  return apiRequest<GetUserExpertiseResponse[]>({
    url: `/mobile/users/me/sections/contact`,
    method: "GET",
  })
}

/**
 * @summary Get notifications of current user
 */
export const getUserNotification = () => {
  return apiRequest<GetUserNotificationResponse[]>({
    url: `/mobile/users/me/sections/notification`,
    method: "GET",
  })
}

/**
 * @summary User requests to become expert
 */
export const expertRequest = () => {
  return apiRequest<void>({ url: `/mobile/users/me:request-expert`, method: "POST" })
}

/**
 * @summary Unsaved question from their list
 */
export const unsavedQuestion = (questionId: string) => {
  return apiRequest<void>({
    url: `/mobile/users/me/sections/saved-questions/${questionId}`,
    method: "DELETE",
  })
}

export type CreateQuestionEventResult = NonNullable<Awaited<ReturnType<typeof createQuestionEvent>>>
export type ListMobileQuestionEventsResult = NonNullable<
  Awaited<ReturnType<typeof listMobileQuestionEvents>>
>
export type CreateQuestionResult = NonNullable<Awaited<ReturnType<typeof createQuestion>>>
export type GetQuestionConfigurationsResult = NonNullable<
  Awaited<ReturnType<typeof getQuestionConfigurations>>
>
export type GetQuestionResult = NonNullable<Awaited<ReturnType<typeof getQuestion>>>
export type GetUserHighlightsResult = NonNullable<Awaited<ReturnType<typeof getUserHighlights>>>
export type GetCommunityQuestionsResult = NonNullable<
  Awaited<ReturnType<typeof getCommunityQuestions>>
>
export type GetMyQuestionsResult = NonNullable<Awaited<ReturnType<typeof getMyQuestions>>>
export type GetMyConsultationsResult = NonNullable<Awaited<ReturnType<typeof getMyConsultations>>>
export type GetRecentQuestionsResult = NonNullable<Awaited<ReturnType<typeof getRecentQuestions>>>
export type QueryQuestionsResult = NonNullable<Awaited<ReturnType<typeof queryQuestions>>>
export type PickQuestionResult = NonNullable<Awaited<ReturnType<typeof pickQuestion>>>
export type ResolveConsultationResult = NonNullable<Awaited<ReturnType<typeof resolveConsultation>>>
export type UploadQuestionFileResult = NonNullable<Awaited<ReturnType<typeof uploadQuestionFile>>>
export type CreateUserExpertiseResult = NonNullable<Awaited<ReturnType<typeof createUserExpertise>>>
export type GetUserExpertiseResult = NonNullable<Awaited<ReturnType<typeof getUserExpertise>>>
export type UpdateUserExpertiseResult = NonNullable<Awaited<ReturnType<typeof updateUserExpertise>>>
export type GetSavedQuestionsResult = NonNullable<Awaited<ReturnType<typeof getSavedQuestions>>>
export type UserSaveQuestionResult = NonNullable<Awaited<ReturnType<typeof userSaveQuestion>>>
export type GetCurrentUserResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>
export type UpdateUserResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
export type GetCurrentUserContactsResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserContacts>>
>
export type GetUserNotificationResult = NonNullable<Awaited<ReturnType<typeof getUserNotification>>>
export type ExpertRequestResult = NonNullable<Awaited<ReturnType<typeof expertRequest>>>
export type UnsavedQuestionResult = NonNullable<Awaited<ReturnType<typeof unsavedQuestion>>>
