/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Tranchy.Ask.API
 * OpenAPI spec version: 1.0
 */
import {
  HttpClient
} from '@angular/common/http'
import type {
  HttpHeaders,
  HttpParams,
  HttpContext
} from '@angular/common/http'
import {
  Injectable
} from '@angular/core'
import {
  Observable
} from 'rxjs'
import type {
  BuyCoffeeOutput,
  BuyCoffeeInput,
  QuestionOutput,
  CreateQuestionInput
} from './models'



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class TranchyAskAPIService {
  constructor(
    private http: HttpClient,
  ) {} postPaymentBuy<TData = BuyCoffeeOutput>(
    buyCoffeeInput: BuyCoffeeInput, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/payment/buy`,
      buyCoffeeInput,options
    );
  }

 postQuestion<TData = QuestionOutput>(
    createQuestionInput: CreateQuestionInput, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/question`,
      createQuestionInput,options
    );
  }

 getQuestionId<TData = QuestionOutput>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/question/${id}`,options
    );
  }

 getQuestionUserUser<TData = QuestionOutput>(
    user: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/question/user/${user}`,options
    );
  }

 getAgencyPortal<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/agency-portal`,options
    );
  }

};

export type PostPaymentBuyClientResult = NonNullable<BuyCoffeeOutput>
export type PostQuestionClientResult = NonNullable<QuestionOutput>
export type GetQuestionIdClientResult = NonNullable<QuestionOutput>
export type GetQuestionUserUserClientResult = NonNullable<QuestionOutput>
export type GetAgencyPortalClientResult = NonNullable<void>
