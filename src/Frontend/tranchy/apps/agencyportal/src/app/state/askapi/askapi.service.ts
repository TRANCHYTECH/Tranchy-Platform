/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Tranchy.Ask.API
 * OpenAPI spec version: 1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpHeaders,
  HttpParams,
  HttpContext,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  BuyCoffeeOutput,
  BuyCoffeeInput,
  QuestionOutput,
  CreateQuestionInput,
} from './models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class TranchyAskAPIService {
  constructor(private http: HttpClient) {}
  buyCoffee<TData = BuyCoffeeOutput>(
    buyCoffeeInput: BuyCoffeeInput,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(`/ask:/payment/buy`, buyCoffeeInput, options);
  }

  createQuestion<TData = QuestionOutput>(
    createQuestionInput: CreateQuestionInput,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question`,
      createQuestionInput,
      options
    );
  }

  getQuestionById<TData = QuestionOutput>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/${id}`, options);
  }

  getQuestionByUser<TData = QuestionOutput>(
    user: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/user/${user}`, options);
  }

  getAskAgencyPortal<TData = void>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/agency-portal`, options);
  }
}

export type BuyCoffeeClientResult = NonNullable<BuyCoffeeOutput>;
export type CreateQuestionClientResult = NonNullable<QuestionOutput>;
export type GetQuestionByIdClientResult = NonNullable<QuestionOutput>;
export type GetQuestionByUserClientResult = NonNullable<QuestionOutput>;
export type GetAskAgencyPortalClientResult = NonNullable<void>;
