/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Tranchy Ask Api Documentation
 * OpenAPI spec version: v1
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpHeaders,
  HttpParams,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  CreateQuestionEventBody,
  CreateQuestionRequest,
  CreateQuestionResponse,
  FinishConsultationRequest,
  GetQuestionConfigurationsResponse,
  GetUserNotificationResponse,
  GetUserResponse,
  MobileQuestionEventMessageSent,
  Question,
  QuestionOutput,
  UploadFileForQuestionBody,
  UploadFileForQuestionParams,
  UploadQuestionFileResponse,
} from './models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class TranchyAskApiDocumentationService {
  constructor(private http: HttpClient) {}
  createQuestion<TData = CreateQuestionResponse>(
    createQuestionRequest: CreateQuestionRequest,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question`,
      createQuestionRequest,
      options
    );
  }

  createUser<TData = void>(options?: HttpClientOptions): Observable<TData> {
    return this.http.post<TData>(`/ask:/user`, undefined, options);
  }

  getCurrentUser<TData = GetUserResponse>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/user`, options);
  }

  getQuestionConfigurations<TData = GetQuestionConfigurationsResponse>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/configurations`, options);
  }

  getQuestionById<TData = QuestionOutput>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/${id}`, options);
  }

  getQuestionByUser<TData = QuestionOutput>(
    user: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/user/${user}`, options);
  }

  getUserNotification<TData = GetUserNotificationResponse[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/user/Notifications`, options);
  }

  /**
   * @summary Create a question event
   */
  createQuestionEvent<TData = QuestionOutput>(
    questionId: string,
    createQuestionEventBody: CreateQuestionEventBody,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question/${questionId}/event`,
      createQuestionEventBody,
      options
    );
  }

  /**
   * @summary Finish consultation
   */
  finishConsultation<TData = void>(
    id: string,
    finishConsultationRequest: FinishConsultationRequest,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question/${id}/finish`,
      finishConsultationRequest,
      options
    );
  }

  /**
   * @summary List question events for mobile devices
   */
  listMobileQuestionEvents<TData = MobileQuestionEventMessageSent[]>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/mobile/${id}/events`, options);
  }

  /**
   * @summary Take consultation
   */
  pickQuestion<TData = Question>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question/${id}/pick`,
      undefined,
      options
    );
  }

  /**
   * @summary Accept question
   */
  acceptQuestion<TData = void>(
    id: string,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question/${id}/accept`,
      undefined,
      options
    );
  }

  /**
   * @summary List community questions
   */
  listCommunityQuestions<TData = Question[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/list/community`, options);
  }

  /**
   * @summary List my questions
   */
  listMyQuestions<TData = Question[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/question/list/mine`, options);
  }

  seedMetadata<TData = void>(options?: HttpClientOptions): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/question/suportdeveloper/seedmetadata`,
      undefined,
      options
    );
  }

  getAskAgencyPortal<TData = void>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/agency-portal`, options);
  }

  uploadFileForQuestion<TData = UploadQuestionFileResponse>(
    questionId: string,
    uploadFileForQuestionBody: UploadFileForQuestionBody,
    params: UploadFileForQuestionParams,
    options?: HttpClientOptions
  ): Observable<TData> {
    const formData = new FormData();
    formData.append('file', uploadFileForQuestionBody.file);

    return this.http.post<TData>(
      `/ask:/file/question/${questionId}`,
      formData,
      {
        ...options,
        params: { ...params, ...options?.params },
      }
    );
  }
}

export type CreateQuestionClientResult = NonNullable<CreateQuestionResponse>;
export type CreateUserClientResult = NonNullable<void>;
export type GetCurrentUserClientResult = NonNullable<GetUserResponse>;
export type GetQuestionConfigurationsClientResult =
  NonNullable<GetQuestionConfigurationsResponse>;
export type GetQuestionByIdClientResult = NonNullable<QuestionOutput>;
export type GetQuestionByUserClientResult = NonNullable<QuestionOutput>;
export type GetUserNotificationClientResult = NonNullable<
  GetUserNotificationResponse[]
>;
export type CreateQuestionEventClientResult = NonNullable<QuestionOutput>;
export type FinishConsultationClientResult = NonNullable<void>;
export type ListMobileQuestionEventsClientResult = NonNullable<
  MobileQuestionEventMessageSent[]
>;
export type PickQuestionClientResult = NonNullable<Question>;
export type AcceptQuestionClientResult = NonNullable<void>;
export type ListCommunityQuestionsClientResult = NonNullable<Question[]>;
export type ListMyQuestionsClientResult = NonNullable<Question[]>;
export type SeedMetadataClientResult = NonNullable<void>;
export type GetAskAgencyPortalClientResult = NonNullable<void>;
export type UploadFileForQuestionClientResult =
  NonNullable<UploadQuestionFileResponse>;
