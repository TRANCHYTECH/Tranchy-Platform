/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Tranchy Ask Api Documentation
 * OpenAPI spec version: v1
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpHeaders,
  HttpParams,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  AcceptQuestionRequest,
  CreateUserRequest,
  GetUserResponse,
  Question,
  RejectQuestionRequest,
  SubmitUserParams,
} from './models';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class TranchyAskApiDocumentationService {
  constructor(private http: HttpClient) {}
  /**
   * @summary Accept question
   */
  acceptQuestion<TData = void>(
    questionId: string,
    acceptQuestionRequest: AcceptQuestionRequest,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/management/questions/${questionId}:accept`,
      acceptQuestionRequest,
      options
    );
  }

  /**
   * @summary List all questions
   */
  listAllQuestions<TData = Question[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/management/questions`, options);
  }

  /**
   * @summary Reject question
   */
  rejectQuestion<TData = void>(
    questionId: string,
    rejectQuestionRequest: RejectQuestionRequest,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/management/questions/${questionId}:reject`,
      rejectQuestionRequest,
      options
    );
  }

  /**
   * @summary Summarize total questions of categories
   */
  summarizeTotalQuestions<TData = void>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(
      `/ask:/management/questions/aggregates/category-summary`,
      options
    );
  }

  createUser<TData = void>(
    createUserRequest: CreateUserRequest,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.post<TData>(
      `/ask:/management/users`,
      createUserRequest,
      options
    );
  }

  getUsers<TData = GetUserResponse[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/management/users`, options);
  }

  getAllPendingExperts<TData = GetUserResponse[]>(
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(
      `/ask:/management/users/aggregates/pending-experts`,
      options
    );
  }

  submitUser<TData = void>(
    params: SubmitUserParams,
    options?: HttpClientOptions
  ): Observable<TData> {
    return this.http.get<TData>(`/ask:/management/users/submit-user`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type AcceptQuestionClientResult = NonNullable<void>;
export type ListAllQuestionsClientResult = NonNullable<Question[]>;
export type RejectQuestionClientResult = NonNullable<void>;
export type SummarizeTotalQuestionsClientResult = NonNullable<void>;
export type CreateUserClientResult = NonNullable<void>;
export type GetUsersClientResult = NonNullable<GetUserResponse[]>;
export type GetAllPendingExpertsClientResult = NonNullable<GetUserResponse[]>;
export type SubmitUserClientResult = NonNullable<void>;
